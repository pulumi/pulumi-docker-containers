# Copies a Docker image from one container registry to another.
name: Copy image
on:
  workflow_call:
    inputs:
      source_registry_uri:
        description: "The URI of source registry from which to copy images.  Defaults to 'docker.io'."
        default: "docker.io"
        required: false
      source_registry_username:
        description: "The username for the source registry.  Defaults to 'pulumi'."
        default: pulumi
        required: false
      dest_registry_uri:
        description: The URI of the destination registry, without the protocol, e.g. "ghcr.io".
        required: true
        type: string
      dest_registry_username:
        description: The username for the destination registry to use to execute `docker login` to push containers.
        required: true
        type: string
      image:
        description: The image name to sync to the destination feed, e.g. "pulumi-python".
        required: true
        type: string
      tag:
        description: The tag to sync.
        required: true
        type: string
    secrets:
      dest_registry_password:
        description: The password for the destination registry to use to execute `docker login` to push containers.
        required: true

jobs:
  copy-image:
    name: "Copy ${{ inputs.image }}:${{ inputs.tag }} from ${{ inputs.source_registry_uri }} to ${{ inputs.dest_registry_uri }}"
    runs-on: ubuntu-latest
    steps:
      - name: Log in to ${{ inputs.dest_registry_feed }}
        run: |
          echo "${{ secrets.dest_registry_password }}" | docker login -u ${{ inputs.dest_registry_username }} --password-stdin https://${{ inputs.dest_registry_uri }}
      - name: Pull ${{ inputs.tag }} and push to ${{ inputs.dest_registry_name }}
        run: |
          docker pull ${{ inputs.source_registry_uri }}/${{ inputs.source_registry_username }}/${{ inputs.image }}:${{ inputs.tag }}
          docker tag ${{ inputs.source_registry_uri }}/${{ inputs.source_registry_username }}/${{ inputs.image }}:${{ inputs.tag }} ${{ inputs.dest_registry_uri }}/${{ inputs.dest_registry_username }}/${{ inputs.image }}:${{ inputs.tag }}
          docker push ${{ inputs.source_registry_uri }}/${{ inputs.dest_registry_uri }}/${{ inputs.dest_registry_username }}/${{ inputs.image }}:${{ inputs.tag }} }}

  # debian-images:
  #   name: Debian SDK and base images
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       image:
  #         [
  #           "pulumi-base",
  #           "pulumi-go",
  #           "pulumi-nodejs",
  #           "pulumi-python",
  #           "pulumi-dotnet",
  #         ]
  #   steps:
  #     - name: Set version
  #       run: |
  #         [ -z "${{ env.DISPATCH_REF }}" ] && echo "PULUMI_VERSION=$(curl https://www.pulumi.com/latest-version)" >> $GITHUB_ENV || echo "PULUMI_VERSION=${{ env.DISPATCH_REF }}" >> $GITHUB_ENV
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-region: us-east-2
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         role-duration-seconds: 3600
  #         role-external-id: upload-pulumi-release
  #         role-session-name: pulumi@githubActions
  #         role-to-assume: ${{ secrets.AWS_UPLOAD_ROLE_ARN }}
  #     - name: Get Public ECR Authorization token
  #       run: |
  #         aws --region us-east-1 ecr-public get-authorization-token \
  #           --query 'authorizationData.authorizationToken' | \
  #           tr -d '"' | base64 --decode | cut -d: -f2 | \
  #           docker login -u AWS --password-stdin https://${{ inputs.dest_registry_uri }}
  #     # NOTE: The process we use for the Kichen Sink image, which is
  #     # single-platform, will not work here.  Pulling a multi-arch manifest from
  #     # Docker Hub, tagging, then pushing will only result in the image of the
  #     # host's architecture (e.g. linux/amd64) getting pushed to the desintation repo.
  #     # For more information, see: https://docs.docker.com/registry/spec/manifest-v2-2/
  #     #
  #     # Prior to re-creating the manifests, we must pull, tag, and push the
  #     # consituent images in the manifests because manifests cannot use source
  #     # images from a different registry.
  #     - name: Tag ${{ ${{ inputs.pulumi_version }} }}-debian-amd64 image and push to AWS Public ECR
  #       run: |
  #         docker pull ${{ inputs.source_registry_username }}/${{ matrix.image }}:${{ ${{ inputs.pulumi_version }} }}-debian-amd64
  #         docker tag ${{ inputs.source_registry_username }}/${{ matrix.image }}:${{ ${{ inputs.pulumi_version }} }}-debian-amd64 ${{ inputs.dest_registry_uri }}/${{ inputs.dest_registry_username }}/${{ matrix.image }}:${{ ${{ inputs.pulumi_version }} }}-debian-amd64
  #         docker push ${{ inputs.dest_registry_uri }}/${{ inputs.dest_registry_username }}/${{ matrix.image }}:${{ ${{ inputs.pulumi_version }} }}-debian-amd64

  #     - name: Tag ${{ ${{ inputs.pulumi_version }} }}-debian-arm64 and push to AWS Public ECR
  #       run: |
  #         docker pull ${{ inputs.source_registry_username }}/${{ matrix.image }}:${{ ${{ inputs.pulumi_version }} }}-debian-arm64
  #         docker tag ${{ inputs.source_registry_username }}/${{ matrix.image }}:${{ ${{ inputs.pulumi_version }} }}-debian-arm64 ${{ inputs.dest_registry_uri }}/${{ inputs.dest_registry_username }}/${{ matrix.image }}:${{ ${{ inputs.pulumi_version }} }}-debian-arm64
  #         docker push ${{ inputs.dest_registry_uri }}/${{ inputs.dest_registry_username }}/${{ matrix.image }}:${{ ${{ inputs.pulumi_version }} }}-debian-arm64
  #     - name: Push ${{ ${{ inputs.pulumi_version }} }}-debian manifest
  #       run: |
  #         docker manifest create \
  #           ${{ inputs.dest_registry_uri }}/${{ inputs.dest_registry_username }}/${{ matrix.image }}:${{ ${{ inputs.pulumi_version }} }}-debian \
  #           ${{ inputs.dest_registry_uri }}/${{ inputs.dest_registry_username }}/${{ matrix.image }}:${{ ${{ inputs.pulumi_version }} }}-debian-amd64 \
  #           ${{ inputs.dest_registry_uri }}/${{ inputs.dest_registry_username }}/${{ matrix.image }}:${{ ${{ inputs.pulumi_version }} }}-debian-arm64
  #         docker manifest push ${{ inputs.dest_registry_uri }}/${{ inputs.dest_registry_username }}/${{ matrix.image }}:${{ ${{ inputs.pulumi_version }} }}-debian
  #     - name: Push ${{ ${{ inputs.pulumi_version }} }} manifest
  #       run: |
  #         docker manifest create \
  #           ${{ inputs.dest_registry_uri }}/${{ inputs.dest_registry_username }}/${{ matrix.image }}:${{ ${{ inputs.pulumi_version }} }} \
  #           ${{ inputs.dest_registry_uri }}/${{ inputs.dest_registry_username }}/${{ matrix.image }}:${{ ${{ inputs.pulumi_version }} }}-debian-amd64 \
  #           ${{ inputs.dest_registry_uri }}/${{ inputs.dest_registry_username }}/${{ matrix.image }}:${{ ${{ inputs.pulumi_version }} }}-debian-arm64
  #         docker manifest push ${{ inputs.dest_registry_uri }}/${{ inputs.dest_registry_username }}/${{ matrix.image }}:${{ ${{ inputs.pulumi_version }} }}
  #     - name: Push latest manifest
  #       run: |
  #         docker manifest create \
  #           ${{ inputs.dest_registry_uri }}/${{ inputs.dest_registry_username }}/${{ matrix.image }}:latest \
  #           ${{ inputs.dest_registry_uri }}/${{ inputs.dest_registry_username }}/${{ matrix.image }}:${{ ${{ inputs.pulumi_version }} }}-debian-amd64 \
  #           ${{ inputs.dest_registry_uri }}/${{ inputs.dest_registry_username }}/${{ matrix.image }}:${{ ${{ inputs.pulumi_version }} }}-debian-arm64
  #         docker manifest push ${{ inputs.dest_registry_uri }}/${{ inputs.dest_registry_username }}/${{ matrix.image }}:latest
  # # NOTE: If UBI images become multi platform, this job can be replaced by adding a similar step to "-debian" for "-ubi" the previous job.
  # ubi-images:
  #   name: UBI SDK and base images
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       image:
  #         [
  #           "pulumi-base",
  #           "pulumi-go",
  #           "pulumi-nodejs",
  #           "pulumi-python",
  #           "pulumi-dotnet",
  #         ]
  #   steps:
  #     - name: Set version
  #       run: |
  #         [ -z "${{ env.DISPATCH_REF }}" ] && echo "PULUMI_VERSION=$(curl https://www.pulumi.com/latest-version)" >> $GITHUB_ENV || echo "PULUMI_VERSION=${{ env.DISPATCH_REF }}" >> $GITHUB_ENV
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-region: us-east-2
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         role-duration-seconds: 3600
  #         role-external-id: upload-pulumi-release
  #         role-session-name: pulumi@githubActions
  #         role-to-assume: ${{ secrets.AWS_UPLOAD_ROLE_ARN }}
  #     - name: Get Public ECR Authorization token
  #       run: |
  #         aws --region us-east-1 ecr-public get-authorization-token \
  #           --query 'authorizationData.authorizationToken' | \
  #           tr -d '"' | base64 --decode | cut -d: -f2 | \
  #           docker login -u AWS --password-stdin https://${{ inputs.dest_registry_uri }}
  #     - name: Tag ${{ ${{ inputs.pulumi_version }} }}-ubi image and push to AWS Public ECR
  #       run: |
  #         docker pull ${{ inputs.source_registry_username }}/${{ matrix.image }}:${{ ${{ inputs.pulumi_version }} }}-ubi
  #         docker tag ${{ inputs.source_registry_username }}/${{ matrix.image }}:${{ ${{ inputs.pulumi_version }} }}-ubi ${{ inputs.dest_registry_uri }}/${{ inputs.dest_registry_username }}/${{ matrix.image }}:${{ ${{ inputs.pulumi_version }} }}-ubi
  #         docker push ${{ inputs.dest_registry_uri }}/${{ inputs.dest_registry_username }}/${{ matrix.image }}:${{ ${{ inputs.pulumi_version }} }}-ubi
